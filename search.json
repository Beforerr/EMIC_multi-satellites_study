[
  {
    "objectID": "src/main.html",
    "href": "src/main.html",
    "title": "Relativistic electron flflux decay and recovery",
    "section": "",
    "text": "We observed three strong electron precipitation which lasted for 3 hours from ELFIN missions.\nWe wanted to investigate the cause of the precipitation.\n\n  \n\n\n\nImport all the libraries\n# To make quarto render holoview properly, somehow you can not use `output: false` in the cell options\nimport altair as alt\nimport hvplot.pandas  # noqa\nimport hvplot.xarray  # noqa\nimport holoviews as hv\nimport proplot as pplt\nimport panel as pn\n\nfrom utilities import *\n\nimport numpy as np\nimport pandas as pd\nimport pdpipe as pdp\nimport pyspedas\nimport xarray as xr\nfrom icecream import ic\nfrom plasmapy.formulary import gyrofrequency\nfrom pyspedas import tinterpol\nfrom pytplot import (get_data, options, split_vec, store_data, tplot,\n                     tplot_options)\n\nimport logging\nlogger = logging.getLogger()\n\npplt.rc[\"svg.fonttype\"] = \"none\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParamaters of this notebook\nPLOT = True"
  },
  {
    "objectID": "src/main.html#elfin-observations-of-emic-driven-precipitations-during-3hour-interval",
    "href": "src/main.html#elfin-observations-of-emic-driven-precipitations-during-3hour-interval",
    "title": "Relativistic electron flflux decay and recovery",
    "section": "ELFIN observations of EMIC driven precipitations during >3hour interval",
    "text": "ELFIN observations of EMIC driven precipitations during &gt;3hour interval\nTwo ELFIN satellites observation of EMIC-driven precipitation (where the precipitation flux surpasses the trapped flux in high-energy channels) over an interval exceeding three hours, from 02:42 to 05:53. The locations are projected in proximity to the L-Shell and MLT, using the Tsyganenko (1989) magnetic field model. Panels (a), (b), and (d) encapsulate data from ELFIN-B, while panel (c) features observations from ELFIN-A."
  },
  {
    "objectID": "src/main.html#arase-part",
    "href": "src/main.html#arase-part",
    "title": "Relativistic electron flflux decay and recovery",
    "section": "ARASE Part",
    "text": "ARASE Part\n\nARASE observation of whistler wave\nProcess data from the ERG satellite: retrieve data, interpolate to the same time as the spectra, and export tplot variables\n\n\nRetrieve data from the ARASE satellite\ntrange = [\"2021-04-17 00:00:00\", \"2021-04-17 12:00:00\"]\npyspedas.erg.pwe_ofa(trange=trange, time_clip=True, ror=False)\npyspedas.erg.mgf(trange=trange, time_clip=True, ror=False)\npyspedas.erg.orb(trange=trange, time_clip=True, ror=False)\npyspedas.erg.orb(\n    trange=trange, level=\"l3\", model=\"t89\", time_clip=True, ror=False\n)  # Get equatorial magnetic field data\n\n# Interpolate the spacecraft position and magnetic field data to the same time as the spectra\nsplit_vec(\n    \"erg_orb_l2_pos_rmlatmlt\", new_name=\"erg_orb_l2_pos_\", suffix=[\"r\", \"mlat\", \"mlt\"]\n)\n\ntinterpol(\"erg_mgf_l2_magt_8sec\", \"erg_pwe_ofa_l2_spec_B_spectra_132\")\ntinterpol(\"erg_orb_l2_pos_Lm\", \"erg_pwe_ofa_l2_spec_B_spectra_132\")\ntinterpol(\"erg_orb_l2_pos_mlat\", \"erg_pwe_ofa_l2_spec_B_spectra_132\")\ntinterpol(\"erg_orb_l3_pos_beq_t89\", \"erg_pwe_ofa_l2_spec_B_spectra_132\")\n\n# Get the data from pytplot variables\nerg_mgf_magt_itrp = get_data(\"erg_mgf_l2_magt_8sec-itrp\")\npwe_spec = get_data(\"erg_pwe_ofa_l2_spec_B_spectra_132\")\npwe_spec_xr = get_data(\"erg_pwe_ofa_l2_spec_B_spectra_132\", xarray=True)\norb_Lm_itrp = get_data(\"erg_orb_l2_pos_Lm-itrp\", xarray=True)\norb_mlat_itrp = get_data(\"erg_orb_l2_pos_mlat-itrp\", xarray=True)\norb_beq_itrp = get_data(\"erg_orb_l3_pos_beq_t89-itrp\", xarray=True)\n\n\n\n\nOverview of ARASE observations\n# Plot the PWE data with the gyrofrequency data and magnetic field data\n\n# Store gyrofrequency data with the PWE data\nmag_t = erg_mgf_magt_itrp.y * u.nT\n\nomega_e = gyrofrequency(mag_t, \"e-\", to_hz=True).to(\"kHz\")\nupper_bound = 0.1 * gyrofrequency(mag_t, \"e-\", to_hz=True).to(\"kHz\")\nlower_bound = 0.5 * gyrofrequency(mag_t, \"e-\", to_hz=True).to(\"kHz\")\n\nstore_data(\"omega_e\", data={\"x\": erg_mgf_magt_itrp.times, \"y\": omega_e})\nstore_data(\"omega_e01\", data={\"x\": erg_mgf_magt_itrp.times, \"y\": lower_bound})\nstore_data(\"omega_e05\", data={\"x\": erg_mgf_magt_itrp.times, \"y\": upper_bound})\n\n# convert omega_e to a DataArray\nomega_e_da = xr.DataArray(omega_e, coords=[pwe_spec_xr.time], dims=[\"time\"])\n\n# store the combined data\nstore_data(\n    \"combined_data\",\n    data=[\"omega_e\", \"omega_e01\", \"omega_e05\", \"erg_pwe_ofa_l2_spec_B_spectra_132\"],\n)\n\noptions(\"combined_data\", \"spec\", True)\noptions(\"omega_e\", \"yrange\", [pwe_spec.v[0], pwe_spec.v[-1]])\n\ntplot([\"combined_data\"])\ntplot([\"erg_orb_l2_pos_Lm\", \"erg_orb_l3_pos_blocal_t89\", \"erg_orb_l3_pos_beq_t89\"])\n\n# tplot([\"combined_data\"],save_png='../figures/erg_pwe_spec')\n\n\n22-Jun-23 13:06:01: combined_data does not contain coordinates for spectrogram plotting.  Continuing...\n\n\n\n\n\n\n\n\nGet the whistler waves normalized mean frequencies from Arase mission for calculating diffusion coefficients.\n\n\nCode\n\n# filter the data\nlower_bound = 0.1\nupper_bound = 0.5\nstep = 0.025\n\ninterested_freq = lambda x: (x.spec_bins &lt; upper_bound * omega_e_da) & (\n    x.spec_bins &gt; lower_bound * omega_e_da\n)\npwe_spec_filtered = pwe_spec_xr.where(interested_freq, 1e-5)\n\n# only keep the time when the maximum intensity is at the interested frequency (whistler mode)\ninterested_time = pwe_spec_xr.argmax(dim=\"v_dim\") == pwe_spec_filtered.argmax(\n    dim=\"v_dim\"\n)\npwe_spec_temp = pwe_spec_xr.where(interested_time)\n\npwe_spec_filtered = pwe_spec_temp.where(interested_freq)\n\n\ndef summed_intensity(_lower_bound, _upper_bound):\n    interested_freq = lambda x: (x.spec_bins &lt; _upper_bound * omega_e_da) & (\n        x.spec_bins &gt; _lower_bound * omega_e_da\n    )\n    # TODO: better way to acculmulate this intensity for uneven frequency bins\n    pwe_spec_freq = (\n        pwe_spec_temp.where(interested_freq).mean(dim=[\"v_dim\"])\n        * (_upper_bound - _lower_bound)\n        * omega_e_da\n        * 1000  # convert to Hz\n    )\n\n    rel_freq = xr.DataArray(\n        [(_upper_bound + _lower_bound) / 2],\n        dims=[\"relative_frequency\"],\n        attrs={\"long_name\": \"Relative Frequency\", \"units\": r\"$\\omega_{ce}$\"},\n    )\n    pwe_spec_freq.attrs[\"long_name\"] = \"Wave intensity\"\n    pwe_spec_freq.attrs[\"units\"] = r\"$pT^2$\"\n\n    return pwe_spec_freq.expand_dims(\n        dim={\"relative_frequency\": rel_freq}\n    ).assign_coords({\"relative_frequency\": rel_freq})\n\n\nlower_bounds = np.arange(lower_bound, upper_bound, step)\nupper_bounds = np.arange(lower_bound + step, upper_bound + step, step)\nda = xr.concat(\n    [\n        summed_intensity(_lower_bound, _upper_bound)\n        for _lower_bound, _upper_bound in zip(lower_bounds, upper_bounds)\n    ],\n    dim=\"relative_frequency\",\n)\n\navg_da = (\n    da.assign_coords({\"Lm\": (\"time\", orb_Lm_itrp.data[:, 0])})\n    .where(lambda x: (x.Lm &lt; 6.5) & (x.Lm &gt; 4.5))\n    .mean(dim=\"time\")\n)\nrelative_frequency = avg_da.idxmax().values\nprint(f\"Normalized mean frequencies of whistler waves: {relative_frequency}\")\n\n# Plot the summed intensity of the PWE data between 0.1 and 0.5 omega_e\n# fig, axs = pplt.subplots()\n# axs.plot(avg_da)\n\n\nNormalized mean frequencies of whistler waves: 0.31249999999999994\n\n\n\n\nWhistler mode waves observed by ARASE\n# Calculate omega_e_max\nomega_e_max = relative_frequency * gyrofrequency(mag_t, \"e-\", to_hz=True).to(\"kHz\")\n\n# store the filtered data\nstore_data(\n    \"pwe_spec_filtered\",\n    data={\"x\": pwe_spec.times, \"y\": pwe_spec_filtered, \"v\": pwe_spec.v},\n)\n\n# Store omega_e_max data\nstore_data(\"omega_e_max\", data={\"x\": erg_mgf_magt_itrp.times, \"y\": omega_e_max})\n\n# Store the combined data\ncombined_data = [\"omega_e_max\", \"pwe_spec_filtered\"]\nstore_data(\"combined_data\", data=combined_data)\n\n# Set options\noptions(\"combined_data\", \"spec\", True)\noptions(\"pwe_spec_filtered\", \"spec\", True)\noptions(\"pwe_spec_filtered\", \"ylog\", True)\noptions(\"pwe_spec_filtered\", \"yrange\", [pwe_spec.v[0], pwe_spec.v[-1]])\noptions(\"pwe_spec_filtered\", \"ytitle\", \"Frequency\")\noptions(\"pwe_spec_filtered\", \"ysubtitle\", \"[kHz]\")\noptions(\"pwe_spec_filtered\", \"zlog\", True)\noptions(\"pwe_spec_filtered\", \"zrange\", [1e-4, 1e2])\noptions(\"pwe_spec_filtered\", \"ztitle\", \"Intensity\")\noptions(\"pwe_spec_filtered\", \"zsubtitle\", \"[pT^2/Hz]\")\n\n# Plot the combined_data\ntplot(\"combined_data\")\n\n\n21-Jun-23 21:17:22: combined_data does not contain coordinates for spectrogram plotting.  Continuing...\n\n\n\n\n\n\n\nARASE electron and proton observations\n\n\nRetrieve ARASE data\nfrom pyspedas import erg\n\ntrange = ['2021-04-17T00','2021-04-17T12']\n\nvars = {\n    'erg_mep_ele': 'erg_mepe_l2_omniflux_FEDO',\n    'erg_mep_pro': 'erg_mepi_l2_omniflux_FODO',\n    'erg_mgf': 'erg_mgf_l2_mag_8sec_gsm',\n    'erg_mlt': 'erg_orb_l2_pos_mlt',\n    'erg_l': 'erg_orb_l2_pos_Lm',\n}\n\nerg.mepe(trange=trange, time_clip=True, ror=False)\nerg.mepi_nml(trange=trange, time_clip=True, ror=False)\nerg.mgf(trange=trange, time_clip=True, ror=False, varformat='*mag*')\nerg.orb(trange=trange, time_clip=True, ror=False, varformat='*pos*')\n\nsplit_vec(\n    \"erg_orb_l2_pos_rmlatmlt\", new_name=\"erg_orb_l2_pos_\", suffix=[\"r\", \"mlat\", \"mlt\"]\n)\n\nsplit_vec(\n    'erg_orb_l2_pos_Lm', suffix=['_90', '_60', '_30']\n)\n\n\n\n\nOverview of ARASE observations\ntplot(list(vars.values()))\n\n\n\n\n\n\n\nGet ARASE data and update the metadata\nds = {key: get_data(value, xarray=True) for (key, value) in vars.items()}\n\n\nfor key in ds.keys():\n    match key:\n        case \"erg_mep_ele\":\n            ds[key].attrs.update(\n                {\n                    \"long_name\": 'ARASE electron',\n                    \"units\": r'$1/s/cm^2/sr/keV$',\n                    \"labels\":[f'{erg:0.0f} keV' for erg in ds[key].spec_bins.values]\n                }\n            )\n            # Replace all occurrences of 0 with NaN\n            ds[key] = ds[key].where(ds[key] != 0)\n        case \"erg_mep_pro\":\n            ds[key].attrs.update(\n                {\n                    \"long_name\": \"ARASE proton\",\n                    \"units\": r'$1/s/cm^2/sr/keV$',\n                    \"labels\":[f'{erg:0.0f} keV' for erg in ds[key].spec_bins.values]\n                }\n            )\n            # Replace all occurrences of 0 with NaN\n            ds[key] = ds[key].where(ds[key] != 0)\n        case \"erg_mgf\":\n            ds[key].attrs.update(\n                {\n                    \"long_name\": \"ARASE B\",\n                    \"units\": 'nT',\n                    \"labels\": [r'$B_x$',r'$B_y$',r'$B_z$'],\n                }\n            )\n        case \"erg_mlt\":\n            ds[key].attrs.update({\"long_name\": 'MLT'})\n        case \"erg_l\":\n            ds[key].attrs.update({\"long_name\": 'L shell'})\n            # Replace all occurrences of 0 with NaN\n            ds[key] = ds[key].where(ds[key] != 0)\n\n\n\n\nPlot ARASE electron and proton observations\ndef plot_erg_mep(type = None, save = False):\n\n    fname = 'arase_mep'\n    \n    if type == 'poster':\n        n = 3\n        fname = f'{fname}_poster'\n    else:\n        n = 4\n    \n    fig, axs = pplt.subplots(ncols=1, nrows=n, refaspect=n, refwidth=2.5 * n, sharey=False)\n    \n    axs[0].plot(\n        ds[\"erg_mep_ele\"][:, ::2],\n        cycle=\"darkred\",\n        labels=ds[\"erg_mep_ele\"].attrs[\"labels\"][::2],\n    )\n    axs[1].plot(\n        ds[\"erg_mep_pro\"][:, 3:-3:2],\n        cycle=\"darkblue\",\n        labels=ds[\"erg_mep_pro\"].attrs[\"labels\"][3:-3:2],\n    )\n\n    axs[n-1].plot(ds[\"erg_mlt\"], color=\"black\")\n    axs[n-1].alty(color=\"red\", label=ds[\"erg_l\"].attrs[\"long_name\"]).plot(\n        ds[\"erg_l\"], color=\"red\"\n    )        \n\n    axs[0].format(yscale=\"log\", yformatter=\"log\", ymin=1e3)\n    axs[0].legend(loc=\"right\", ncols=1, frame=False)\n    axs[1].format(yscale=\"log\", yformatter=\"log\")\n    axs[1].legend(loc=\"right\", ncols=1, frame=False)\n\n    if not type == 'poster':\n        axs[2].plot(\n            ds[\"erg_mgf\"],\n            cycle=[\"black\", \"red\", \"blue\"],\n            labels= ds[\"erg_mgf\"].attrs[\"labels\"]\n        )\n        axs[2].format(ylim=(-3e2, 3e2))\n        axs[2].legend(loc=\"right\", ncols=1, frame=False)\n    \n    if save:\n        fig.savefig(f\"../figures/{fname}.svg\")\n        fig.savefig(f\"../figures/{fname}.pdf\")\n\n    return fig\n\nfig = plot_erg_mep(type='poster', save=True)\n\n\n\n\n\nARASE electron and proton observations (~10 keV to ~100 keV). Strong electron injection are visible at the beginning of EMIC-driven electron precipitations and at the end of interval.\n\n\n\n\n\n\nInvestigate changing fo high energy fluxes over time from ARASE\n\n\nLoad the data\ntrange = [\"2021-04-16\", \"2021-04-18\"]\n\npyspedas.erg.xep(trange=trange, time_clip=True, ror=False)\npyspedas.erg.orb(trange=trange, time_clip=True, ror=False)\n\n# xep: 'erg_xep_l2_FEDO_SSD'\n# orb: ['erg_orb_l2_pos_llr',\n#  'erg_orb_l2_pos_gse',\n#  'erg_orb_l2_pos_gsm',\n#  'erg_orb_l2_pos_sm',\n#  'erg_orb_l2_pos_rmlatmlt',\n#  'erg_orb_l2_pos_eq',\n#  'erg_orb_l2_pos_iono_north',\n#  'erg_orb_l2_pos_iono_south',\n#  'erg_orb_l2_pos_blocal',\n#  'erg_orb_l2_pos_blocal_mag',\n#  'erg_orb_l2_pos_beq',\n#  'erg_orb_l2_pos_beq_mag',\n#  'erg_orb_l2_pos_Lm',\n#  'erg_orb_l2_vel_gse',\n#  'erg_orb_l2_vel_gsm',\n#  'erg_orb_l2_vel_sm',\n#  'erg_orb_l2_spn_num',\n#  'erg_orb_l2_man_prep_flag',\n#  'erg_orb_l2_man_on_flag',\n#  'erg_orb_l2_eclipse_flag']\n\n\n\n\nPlot the overview of the high energy fluxes for ARASE\ntplot(\"erg_xep_l2_FEDO_SSD\")\ntplot(\"erg_orb_l2_pos_Lm\")\n\n\n\n\n\n\n\n\n\n\nGet data from tplot variables\nsplit_vec(\n    \"erg_orb_l2_pos_rmlatmlt\", new_name=\"erg_orb_l2_pos_\", suffix=[\"r\", \"mlat\", \"mlt\"]\n)\n\nerg_orb_Lm = get_data(\"erg_orb_l2_pos_Lm\", xarray=True)\nerg_orb_mlat = get_data(\"erg_orb_l2_pos_mlat\", xarray=True)\nerg_orb_mlt = get_data(\"erg_orb_l2_pos_mlt\", xarray=True)\nerg_xep = get_data(\"erg_xep_l2_FEDO_SSD\", xarray=True)\n\n\n\n\nFilter and group the data\ndef time_group(time):\n    \"\"\"Group data points by time\"\"\"\n\n    # Set a threshold time interval for grouping data\n    time_threshold = pd.Timedelta(minutes=30)\n\n    # Compute the time intervals between each data point\n    time_delta = time.diff()\n\n    # Create a boolean mask for identifying the start of each group\n    group_start_mask = (time_delta &gt; time_threshold) | time_delta.isnull()\n\n    # Assign a group ID to each data point based on the start of each group\n    return group_start_mask.cumsum()\n\nerg_orb_pipe = pdp.PdPipeline(\n    [\n        # only keep data where Lm &gt; 5 and 10 &gt; mlat &gt; -10\n        pdp.keep_rows_where[\"erg_orb_l2_pos_Lm\"] &gt; 4.5,\n        pdp.keep_rows_where[\"erg_orb_l2_pos_Lm\"] &lt; 5.5,\n        pdp.keep_rows_where[\"erg_orb_l2_pos_mlat\"] &gt; -10,\n        pdp.keep_rows_where[\"erg_orb_l2_pos_mlat\"] &lt; 10,\n        # group data by time\n        pdp.ColByFrameFunc(\"group_id\", lambda df: time_group(df.index.to_series())),\n    ]\n)\n\nerg_orb_df = xr.merge([erg_orb_Lm[:, 0], erg_orb_mlat, erg_orb_mlt]).to_dataframe()\nerg_orb_df_filtered = erg_orb_pipe.apply(erg_orb_df)\n\n\n\n\nPlot the overview of the ERG orbit during the period of interest\nerg_orb_df.hvplot.scatter(x=\"erg_orb_l2_pos_mlt\",y=\"erg_orb_l2_pos_mlat\") * erg_orb_df_filtered.hvplot.scatter(x=\"erg_orb_l2_pos_mlt\",y=\"erg_orb_l2_pos_mlat\")\nerg_orb_df.hvplot(x=\"time\",y=[\"erg_orb_l2_pos_Lm\",\"erg_orb_l2_pos_mlat\",\"erg_orb_l2_pos_mlt\"]) * erg_orb_df_filtered.hvplot.scatter(x=\"time\",y=[\"erg_orb_l2_pos_Lm\",\"erg_orb_l2_pos_mlat\",\"erg_orb_l2_pos_mlt\"])\n\n\n\n\nGroup erg_xep data by orbit groups\nerg_orb_tgroup = (\n    erg_orb_df_filtered.reset_index()\n    .groupby(\"group_id\")\n    .agg({\"time\": [\"min\", \"max\"]})\n    .to_numpy()\n)\n\nerg_xep_df = erg_xep.to_dataframe()\n\nfor tr_min, tr_max in erg_orb_tgroup:\n    erg_xep_df.loc[tr_min:tr_max, \"trange\"] = \"{}, {}\".format(\n        tr_min.astype(\"datetime64[h]\"), tr_max.astype(\"datetime64[h]\")\n    )\n\n\n\n\nCode\nvatt = erg_xep.attrs['CDF']['VATT']\n\nchart01 = alt.Chart(erg_xep_df.dropna()).mark_line(point=True).encode(\n    x=alt.X(\"spec_bins\", title=\"Energy [keV]\"),\n    y=alt.Y(\"mean(erg_xep_l2_FEDO_SSD)\", scale=alt.Scale(type=\"log\") , title = f\"{vatt['LABLAXIS']} [{vatt['UNITS']}]\"),\n    color=\"trange\",\n).properties(\n    title = f\"{vatt['CATDESC']}\"\n)\n\nchart02 = alt.Chart(erg_xep_df.dropna()).mark_line(point=True).encode(\n    x=alt.X(\"spec_bins\", title=\"Energy [keV]\"),\n    y=alt.Y(\"mean(erg_xep_l2_FEDO_SSD)\", title = f\"{vatt['LABLAXIS']} [{vatt['UNITS']}]\"),\n    color=\"trange\",\n).properties(\n    title = f\"{vatt['CATDESC']}\"\n)\n\ndisplay(chart01, chart02)"
  },
  {
    "objectID": "src/main.html#mms-electron-and-proton-observations",
    "href": "src/main.html#mms-electron-and-proton-observations",
    "title": "Relativistic electron flflux decay and recovery",
    "section": "MMS electron and proton observations",
    "text": "MMS electron and proton observations\n\n\nRetrieve MMS data\nfrom pyspedas import mms\nfrom pyspedas import time_clip\n\nprobe = '1'\ntrange = ['2021-04-17T00','2021-04-17T12']\n\nvars = {\n    'mms1_feeps_ele': 'mms1_epd_feeps_srvy_l2_electron_intensity_omni_spin',\n    'mms1_feeps_proton': 'mms1_epd_eis_srvy_l2_extof_proton_flux_omni_spin',\n    'mms1_fgm_bvec': 'mms1_fgm_b_gsm_srvy_l2_bvec',\n    'mms1_mlt': 'mms1_mec_mlt',\n    'mms1_l_dipole': 'mms1_mec_l_dipole',\n}\n\nmms.feeps(trange=trange, probe=probe, varformat='*electron*') # BUG:`varnames` doesn't work\nmms.eis(trange=trange, probe=probe)  # BUG:`varnames` doesn't work ; `varformat` doesn't load spin data\nmms.fgm(trange=trange, probe=probe, varformat='*gsm*') # BUG:`varnames` doesn't work\nmms.mec(trange=trange, probe=probe, varformat='*mec*') # BUG:`varnames` doesn't work\n\nfor var in vars.values():\n    time_clip(var, trange[0], trange[1], suffix='')\n\n\n\n\nOverview of MMS observations\ntplot(list(vars.values()))\n\n\n22-Jun-23 11:40:19: /Users/zijin/mambaforge/envs/cool_space_science/lib/python3.10/site-packages/pytplot/MPLPlotter/specplot.py:102: RuntimeWarning: divide by zero encountered in log10\n  zdata = np.log10(out_values)\n\n\n\n\n\n\n\n\nGet MMS data into xarray and update the metadata\nds = {key: get_data(value, xarray=True) for (key, value) in vars.items()}\n\nfor key in ds.keys():\n    match key.split('_', 1)[1]:\n        case \"feeps_ele\" | \"feeps_proton\":\n            ds[key].attrs.update(\n                {\n                    \"long_name\": ds[key].attrs[\"plot_options\"][\"yaxis_opt\"][\"axis_label\"],\n                    \"units\": ds[key].attrs[\"plot_options\"]['zaxis_opt'][\"axis_label\"],\n                    \"labels\":[f'{erg:0.0f} keV' for erg in ds[key].spec_bins.values]\n                }\n            )\n        case \"fgm_bvec\":\n            ds[key].attrs.update(\n                {\n                    \"long_name\": \"MMS1 B\",\n                    \"units\": 'nT',\n                    \"labels\": [r'$B_x$',r'$B_y$',r'$B_z$'],\n                }\n            )\n        case \"mlt\":\n            ds[key].attrs.update({\"long_name\": 'MLT'})\n        case \"l_dipole\":\n            ds[key].attrs.update({\"long_name\": 'L shell'})\n\n\n\n\nPlot MMS electron and proton observations\ndef plot_mms_epd(type = None, save=False):\n    \n    fname = 'mms_epd'\n    if type == 'poster':\n        n = 3\n        fname = f'{fname}_poster'\n    else:\n        n = 4\n\n    fig, axs = pplt.subplots(ncols=1, nrows=n, refaspect=n, refwidth=2.5 * n, sharey=False)\n    axs[0].plot(\n        ds[\"mms1_feeps_ele\"][:, ::2],\n        cycle=\"darkred_r\",\n        labels=ds[\"mms1_feeps_ele\"].attrs[\"labels\"][::2],\n    )\n    axs[1].plot(\n        ds[\"mms1_feeps_proton\"][:, :-1:],\n        cycle=\"darkblue_r\",\n        labels=ds[\"mms1_feeps_proton\"].attrs[\"labels\"][:-1],\n    )\n\n    axs[n-1].plot(ds[\"mms1_mlt\"], color=\"black\")\n    axs[n-1].alty(color=\"red\", label=ds[\"mms1_l_dipole\"].attrs[\"long_name\"]).plot(\n        ds[\"mms1_l_dipole\"], color=\"red\"\n    )\n\n    axs[0].format(yscale=\"log\", yformatter=\"log\", ymin=1e1)\n    axs[0].legend(loc=\"right\", ncols=1, frame=False)\n    axs[1].format(yscale=\"log\", yformatter=\"log\", ymin=1e0)\n    axs[1].legend(loc=\"right\", ncols=1, frame=False)\n    \n    if not type == 'poster':\n        axs[2].plot(\n            ds[\"mms1_fgm_bvec\"],\n            cycle=[\"black\", \"red\", \"blue\"],\n            labels= ds[\"mms1_fgm_bvec\"].attrs[\"labels\"]\n        )\n        axs[2].format(ylim=(-3e2, 3e2))\n        axs[2].legend(loc=\"right\", ncols=1, frame=False)\n\n    if save:\n        fig.savefig(f\"../figures/{fname}.svg\")\n        fig.savefig(f\"../figures/{fname}.pdf\")\n\n    return fig\n\n\n# plot_mms_epd(type='poster', save=True)\nfig = plot_mms_epd()\n\n\n\n\n\nMMS electron and proton observations (~50 keV to ~500 keV). Localized decrease of electron fluxes is notable around ELFIN observations of EMIC driven precipitations and strong electron injection signatures are visible at the end of EMIC-driven electron precipitations."
  },
  {
    "objectID": "src/main.html#poes-observations-of-proton-precipitation",
    "href": "src/main.html#poes-observations-of-proton-precipitation",
    "title": "Relativistic electron flflux decay and recovery",
    "section": "POES observations of proton precipitation",
    "text": "POES observations of proton precipitation\nOverview of the POES from THEMIS website  \n\n \n\n\n\nPOES observations of proton precipitation\nlogger.disabled = True\n\nprobe = \"noaa15\"\ntime_slices = [\n    [\"2021-04-17 01:15:00\", \"2021-04-17 01:20:00\"],\n    [\"2021-04-17 02:57:00\", \"2021-04-17 03:03:00\"],\n    [\"2021-04-17 04:38:00\", \"2021-04-17 04:44:00\"],\n]\n\n[plot_poes_mep_pro(probe=probe, trange=time_slice, save=True) for time_slice in time_slices]\n\nprobe = \"noaa19\"\ntime_slices = [\n    [\"2021-04-17 01:47:00\", \"2021-04-17 01:52:00\"],\n    [\"2021-04-17 03:30:00\", \"2021-04-17 03:36:00\"],\n    [\"2021-04-17 05:12:00\", \"2021-04-17 05:18:00\"],\n]\n\n[plot_poes_mep_pro(probe=probe, trange=time_slice, save=True) for time_slice in time_slices]\n\nlogger.disabled = False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOES observations of proton precipitation confirms the L-shell localization of EMIC generation region between L~4.5 and 6. At L&gt;6 POES shows strong curvature scattering of protons indicating on isotropic equatorial distribution and no EMIC wave generation”"
  },
  {
    "objectID": "src/main.html#goes-observations-of-electron-and-proton",
    "href": "src/main.html#goes-observations-of-electron-and-proton",
    "title": "Relativistic electron flflux decay and recovery",
    "section": "GOES observations of electron and proton",
    "text": "GOES observations of electron and proton\nOverview of GOES from THEMIS website\n\n \n\nParticle data is from Space Environment In Situ Suite (SEISS) instrument.\n\n\nRetrieve GOES particle data\ntrange = [\"2021-04-17T00:00:00\", \"2021-04-17T12:00:00\"]\n\ng16_pflux, g16_eflux = goes_part_prod(trange, probe='16')\ng17_pflux, g17_eflux = goes_part_prod(trange, probe='17')\n\ng16_mag = geos_mag_prod(trange, probe='16')\ng17_mag = geos_mag_prod(trange, probe='17')\n# pyspedas.goes.orbit(trange=trange, probe=probe, time_clip=True, prefix=f'g{probe}_')\n\n\n\n\nPlot GOES electron and proton observations\ndef plot_goes(type=None):\n    if type == 'poster':\n        n = 4\n    else:\n        n=6\n    \n    fig, axs = pplt.subplots(ncols=1, nrows=n, refaspect=n, refwidth=2.5 * n, sharey=False)\n\n    axs[0].plot(g16_eflux.sum(dim='telescopes'),\n                cycle=\"darkred_r\",)\n    axs[1].plot(g16_pflux.sum(dim='telescopes'),\n                cycle=\"darkblue_r\",)\n    axs[2].plot(g17_eflux.sum(dim='telescopes'),\n                cycle=\"darkred_r\",)\n    axs[3].plot(g17_pflux.sum(dim='telescopes'),\n                cycle=\"darkblue_r\",)\n\n    axs[0].format(\n        yscale=\"log\",yformatter=\"log\",ylim=(1e-1, 1e6),\n    )\n    axs[1].format(\n        yscale=\"log\",yformatter=\"log\",ylim=(1e-2, 1e5),\n    )\n    axs[2].format(\n        yscale=\"log\",yformatter=\"log\",ylim=(1e-1, 1e6),\n    )\n    axs[3].format(\n        yscale=\"log\",yformatter=\"log\",ylim=(1e-2, 1e5),\n    )\n\n    axs[0].legend(loc=\"right\", ncols=1, frame=False)\n    axs[1].legend(loc=\"right\", ncols=1, frame=False)\n    axs[2].legend(loc=\"right\", ncols=1, frame=False)\n    axs[3].legend(loc=\"right\", ncols=1, frame=False)\n    \n    if not type == 'poster':\n        axs[4].plot(g16_mag)\n        axs[5].plot(g17_mag)\n        axs[4].legend(loc=\"right\", ncols=1, frame=False)\n        axs[5].legend(loc=\"right\", ncols=1, frame=False)\n\n    if type == 'poster':\n        fig.savefig(f\"../figures/goes_mpsh_poster.svg\")\n        fig.savefig(f\"../figures/goes_mpsh_poster.pdf\")\n    elif type == 'publication':\n        fig.savefig(f\"../figures/goes_mpsh.svg\")\n        fig.savefig(f\"../figures/goes_mpsh.pdf\")\n    return fig\n\n# fig = plot_goes(type='poster', save=True)\nfig = plot_goes()\n\n\n\n\n\nGOES-R electron and proton observations (70 keV to ~1 MeV) from two geostationary operatioinal satellites. Ion injections are visible before the time when ELFIN observed strong electron precipitation. Series of strong electron injections observed around noon after drifting from the midnight."
  }
]